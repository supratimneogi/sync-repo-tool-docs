{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udd04 Sync-Repos Tool Documentation","text":"<p>Welcome to the official documentation for the sync-repos tool - your powerful DevOps companion for seamless file synchronization across directories and Git repositories.</p> <p>Simplify your workflow, eliminate manual file copying, and ensure consistency across your projects.</p>"},{"location":"#about","title":"\ud83d\udccb About","text":"<ul> <li>Version: 2.7.3</li> <li>Last Updated: April 15, 2025</li> <li>Maintainer: Supratim Neogi (<code>supratimneogi007</code>)</li> </ul>"},{"location":"#why-this-tool-was-created","title":"\ud83d\udca1 Why This Tool Was Created","text":"<p>This tool was born out of real DevOps challenges I faced:</p> <ul> <li> <p>Manual Synchronization Errors: Tired of mistakes when manually copying files between environments</p> </li> <li> <p>Version Inconsistencies: Dealing with different file versions across development, staging, and production</p> </li> <li> <p>Time-Consuming Processes: Wasting hours on repetitive file management tasks</p> </li> <li> <p>Lack of Audit Trail: No easy way to track what was synchronized and when</p> </li> <li> <p>Integration Difficulties: Struggling to incorporate file syncing into automated workflows</p> </li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li>Install the tool:</li> </ol> <p><code>bash    curl -L -u \"&lt;your-username&gt;:&lt;your-app-password&gt;\" -O \"https://api.bitbucket.org/2.0/repositories/supratimneogi007/syncmaster/downloads/sync-repos_2.7.3_all.deb\" &amp;&amp; sudo apt install ./sync-repos_2.7.3_all.deb</code></p> <ol> <li>Basic sync command:</li> </ol> <p><code>bash    sync-repos --source /path/to/source --target /path/to/target</code></p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>Bidirectional Synchronization: Keep files in sync between multiple locations</li> <li>Git Repository Support: Directly sync with Git repositories</li> <li>Custom Filtering: Include or exclude files using patterns</li> <li>Automation Ready: Easily integrate with CI/CD pipelines</li> <li>Conflict Resolution: Smart handling of file conflicts</li> </ul>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"<ul> <li>\ud83d\udce5 Installation - Get started with setup and configuration</li> <li>\ud83d\udd27 Usage - Learn the core commands and options</li> <li>\ud83d\udcd8 Details Usage - Follow practical examples and best practices</li> <li>\ud83d\udee0\ufe0f Maintenance - Keep your installation up to date</li> <li>\u2753 Troubleshooting - Solve common issues and challenges</li> </ul>"},{"location":"#resources","title":"\ud83d\udd17 Resources","text":"<p>This comprehensive documentation provides step-by-step instructions for DevOps teams to leverage the full power of the sync-repos tool, along with detailed guidance for developers maintaining the codebase.</p> <p>sync-repos is distributed as a <code>.deb</code> package and hosted in our private Bitbucket repository: <code>supratimneogi007/syncmaster</code></p>"},{"location":"detailedUsage/","title":"Comprehensive Usage Guide","text":"<p>This document provides detailed instructions on how to use the sync-repository tool effectively.</p>"},{"location":"detailedUsage/#basic-command-syntax","title":"Basic Command Syntax","text":"<pre><code>sync-repos [OPTION]\n</code></pre>"},{"location":"detailedUsage/#command-options","title":"Command Options","text":"Option Description <code>-h</code>, <code>--help</code> Display usage information <code>--i</code> Perform file synchronization between repositories <code>--rb</code> Rollback to the latest backup <code>--rlp</code> Rollback the last Git push <code>--rtc</code> Rollback to a specific Git commit <code>--edit-track</code>, <code>-et</code> Edit the repository tracking file <code>--show-ids</code>, <code>-id</code> Show operation IDs for tracked repositories <code>--clear-backups</code> Clear the backup folder <code>--show-logs</code> Display logs in the terminal <code>--version</code> Show script version <code>--cicd</code> Run in CI/CD mode (requires sourceURL, destURL, sourceBranch, destBranch, accessToken, syncConsent)"},{"location":"detailedUsage/#common-usage-scenarios","title":"Common Usage Scenarios","text":""},{"location":"detailedUsage/#1-initial-setup","title":"1. Initial Setup","text":"<p>Before using the tool, you need to set up your directories and add repositories to track. When you run the tool for the first time, it will prompt you to specify source and destination repositories:</p> <pre><code># Start synchronization process\nsync-repos --i\n</code></pre> <p>You'll be prompted to choose whether to use a Git URL or an Operation ID for both source and destination:</p> <pre><code>For source directory, do you want to use:\n1) Git URL\n2) Operation ID (OP_ID)\nEnter choice [1]: 1\nEnter Git URL for source: git@github.com:username/source-repo.git\n\nFor destination directory, do you want to use:\n1) Git URL\n2) Operation ID (OP_ID)\nEnter choice [1]: 1\nEnter Git URL for destination: git@github.com:username/destination-repo.git\n</code></pre>"},{"location":"detailedUsage/#2-syncing-repositories","title":"2. Syncing Repositories","text":"<p>Once you've set up tracking, you can sync repositories:</p> <pre><code># Start the synchronization process\nsync-repos --i\n</code></pre> <p>The tool will: 1. Create a backup of the destination directory 2. Pull the latest changes from the source repository 3. Sync files from source to destination using rsync 4. Prompt you to perform Git operations (add, commit, push)</p>"},{"location":"detailedUsage/#3-managing-tracked-repositories","title":"3. Managing Tracked Repositories","text":"<pre><code># View all tracked repositories with their operation IDs\nsync-repos --show-ids\n\n# Edit tracking information for repositories\nsync-repos --edit-track\n</code></pre> <p>The <code>--edit-track</code> option allows you to: - Update repository URLs - Change repository paths - Switch branches - Modify operation IDs</p>"},{"location":"detailedUsage/#4-backup-and-restore","title":"4. Backup and Restore","text":"<p>The tool automatically creates backups before syncing. To rollback:</p> <pre><code># Rollback to the latest backup\nsync-repos --rb\n\n# Rollback the last Git push\nsync-repos --rlp\n\n# Rollback to a specific commit (you'll be prompted for the commit hash)\nsync-repos --rtc\n\n# Clear old backups\nsync-repos --clear-backups\n</code></pre>"},{"location":"detailedUsage/#5-log-management","title":"5. Log Management","text":"<pre><code># View logs from previous operations\nsync-repos --show-logs\n</code></pre>"},{"location":"detailedUsage/#advanced-usage-cicd-mode","title":"Advanced Usage: CI/CD Mode","text":"<p>The tool can be used in CI/CD pipelines with the <code>--cicd</code> flag and required parameters:</p> <pre><code>sync-repos --cicd sourceURL:https://github.com/user/repo.git destURL:https://github.com/user/dest-repo.git sourceBranch:main destBranch:main accessToken:your-token syncConsent:yes\n</code></pre> <p>Required parameters for CI/CD mode: - <code>sourceURL</code>: URL of the source repository - <code>destURL</code>: URL of the destination repository - <code>sourceBranch</code>: Branch to use in source repository - <code>destBranch</code>: Branch to use in destination repository - <code>accessToken</code>: Git access token for authentication - <code>syncConsent</code>: Set to \"yes\" to automatically perform Git operations</p>"},{"location":"detailedUsage/#environment-configuration","title":"Environment Configuration","text":"<p>The tool can be configured using environment variables or a <code>.env</code> file in the root directory:</p> <pre><code>ENVIRONMENT=development\nBASE_DIR=/path/to/base/directory\n</code></pre> <p>If <code>ENVIRONMENT</code> is set to \"development\", the tool will use the current directory as the base directory.</p>"},{"location":"detailedUsage/#directory-structure","title":"Directory Structure","text":"<p>The tool creates and uses the following directory structure:</p> <pre><code>$BASE_DIR/\n\u251c\u2500\u2500 SYNC_DIR/\n\u2502   \u251c\u2500\u2500 repo_tracking.json     # Tracks repositories and operation IDs\n\u2502   \u251c\u2500\u2500 SOURCE_DIR/            # Default source directory\n\u2502   \u2514\u2500\u2500 DEST_DIR/              # Default destination directory\n\u251c\u2500\u2500 LOGS/\n\u2502   \u2514\u2500\u2500 [DATE]/                # Logs organized by date\n\u2502       \u2514\u2500\u2500 sync_[TIMESTAMP].log.json\n\u2514\u2500\u2500 BACKUP/\n    \u2514\u2500\u2500 backup_[TIMESTAMP].tar.gz\n</code></pre>"},{"location":"detailedUsage/#error-handling","title":"Error Handling","text":"<p>The tool provides detailed error messages. Common errors include: - Invalid directory paths - Repository not found - Permission issues - Git operation failures</p> <p>When encountering errors, the details will be logged to the JSON log file. You can view these logs with the <code>--show-logs</code> option.</p>"},{"location":"detailedUsage/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>For large repositories, synchronization may take longer</li> <li>Memory usage should remain stable even with large repositories</li> <li>Consider excluding large binary files using the rsync exclude pattern</li> <li>Git operations (especially push) may require authentication</li> </ul>"},{"location":"detailedUsage/#examples","title":"Examples","text":""},{"location":"detailedUsage/#using-operation-ids","title":"Using Operation IDs","text":"<p>After running the tool at least once, repositories will be assigned operation IDs that can be used for quick reference:</p> <pre><code># First, list available operation IDs\nsync-repos --show-ids\n\n# Then use an operation ID for synchronization\nsync-repos --i\n# When prompted, choose option 2 and enter the operation ID\n</code></pre>"},{"location":"detailedUsage/#switching-repository-branches","title":"Switching Repository Branches","text":"<p>When editing tracking information:</p> <pre><code>sync-repos --edit-track\n# Choose the repository to edit\n# Select option 3 to update the branch\n# Enter the new branch name\n# Confirm to update the repository immediately\n</code></pre>"},{"location":"guide/","title":"Sync Repos Script Documentation","text":""},{"location":"guide/#overview","title":"\ud83d\udccb Overview","text":"<p>The <code>syncRepoV3_LTS.sh</code> script is a powerful tool designed to synchronize files between source and destination directories or Git repositories. It provides robust features for backup, rollback, and Git operations. After installation, you can run it from any directory using the <code>sync_repo</code> command.</p>"},{"location":"guide/#features","title":"\u2728 Features","text":""},{"location":"guide/#file-synchronization","title":"\ud83d\udcc2 File Synchronization","text":"<ul> <li>Seamlessly sync files between directories or Git repositories</li> <li>Support for both local paths and remote Git repositories</li> <li>Intelligent handling of Git branches</li> </ul>"},{"location":"guide/#backup-and-rollback","title":"\ud83d\udd04 Backup and Rollback","text":"<ul> <li>Automatic Backups: Creates backups before any synchronization</li> <li>Multiple Rollback Options:</li> <li><code>--rb</code>: Rollback to latest backup</li> <li><code>--rlp</code>: Rollback the last Git push</li> <li><code>--rtc</code>: Rollback to a specific Git commit</li> </ul>"},{"location":"guide/#git-integration","title":"\ud83d\udd27 Git Integration","text":"<ul> <li>Pull latest changes from source repositories</li> <li>Commit and push changes to destination repositories</li> <li>Branch management and switching</li> </ul>"},{"location":"guide/#repository-tracking","title":"\ud83d\udcca Repository Tracking","text":"<ul> <li>Track repositories with unique operation IDs</li> <li>Edit repository information with user-friendly interface</li> <li>View all tracked repositories in a formatted display</li> </ul>"},{"location":"guide/#comprehensive-logging","title":"\ud83d\udcdd Comprehensive Logging","text":"<ul> <li>Detailed JSON-based logs for all operations</li> <li>Logs organized by date for easy reference</li> <li>View logs directly from the command line</li> </ul>"},{"location":"guide/#directory-structure","title":"\ud83d\uddc2\ufe0f Directory Structure","text":"<p>The script creates the following directory structure:</p> <pre><code>~/.sync_repo/\n\u251c\u2500\u2500 BACKUP/          # Stores timestamped backup archives\n\u251c\u2500\u2500 LOGS/            # Contains detailed operation logs\n\u2502   \u2514\u2500\u2500 DD_Month/    # Organized by date (e.g., 25_March)\n\u251c\u2500\u2500 SYNC_DIR/\n\u2502   \u251c\u2500\u2500 YYYY_MM_REPOS/  # Repositories organized by month\n\u2502   \u2502   \u2514\u2500\u2500 DD/      # And day\n\u2502   \u2502       \u251c\u2500\u2500 source_DIR_XXXXXX/  # Source repositories\n\u2502   \u2502       \u2514\u2500\u2500 dest_DIR_XXXXXX/    # Destination repositories\n\u2502   \u2514\u2500\u2500 repo_tracking.json  # Repository tracking information\n</code></pre>"},{"location":"guide/#quick-start-guide","title":"\ud83d\ude80 Quick Start Guide","text":""},{"location":"guide/#installation","title":"Installation","text":"<pre><code># Install required dependencies\nsudo apt install git rsync jq tar\n\n# Run the script directly\nbash curl -L -u \"&lt;your-username&gt;:&lt;your-app-password&gt;\" -O \"https://api.bitbucket.org/2.0/repositories/supratimneogi007/syncmaster/downloads/sync-repos_2.7.3_all.deb\" &amp;&amp; sudo apt install ./sync-repos_2.7.3_all.deb\n</code></pre>"},{"location":"guide/#basic-usage","title":"Basic Usage","text":"<pre><code># Perform file synchronization\nsync_repo --i\n\n# Rollback to latest backup\nsync_repo --rb\n\n# Edit repository tracking information\nsync_repo --edit-track\n</code></pre>"},{"location":"guide/#command-reference","title":"\ud83d\udcda Command Reference","text":"Command Alias Description Example <code>--i</code> Perform file synchronization <code>sync_repo --i</code> <code>--rb</code> Rollback to latest backup <code>sync_repo --rb</code> <code>--rlp</code> Rollback last Git push <code>sync_repo --rlp</code> <code>--rtc</code> Rollback to specific commit <code>sync_repo --rtc</code> <code>--edit-track</code> <code>-et</code> Edit repository tracking <code>sync_repo --edit-track</code> <code>--show-ids</code> <code>-id</code> Show operation IDs <code>sync_repo --show-ids</code> <code>--clear-backups</code> Clear backup folder <code>sync_repo --clear-backups</code> <code>--show-logs</code> Display available logs <code>sync_repo --show-logs</code> <code>--version</code> Show script version <code>sync_repo --version</code> <code>--help</code> <code>-h</code> Display help information <code>sync_repo --help</code>"},{"location":"guide/#practical-examples","title":"\ud83d\udcdd Practical Examples","text":""},{"location":"guide/#example-1-syncing-between-two-git-repositories","title":"Example 1: Syncing Between Two Git Repositories","text":"<pre><code># Start synchronization process\nsync_repo --i\n\n# When prompted, enter Git URLs:\n# Source: git@github.com:username/source-repo.git\n# Destination: git@github.com:username/destination-repo.git\n# Follow the prompts to complete the sync\n</code></pre>"},{"location":"guide/#example-2-using-operation-ids-for-quick-access","title":"Example 2: Using Operation IDs for Quick Access","text":"<pre><code># First, view available operation IDs\nsync_repo --show-ids\n\n# Then use the operation ID for syncing\nsync_repo --i\n# When prompted, select option 2 for operation ID\n# Enter the ID shown from --show-ids command\n</code></pre>"},{"location":"guide/#example-3-rollback-after-a-failed-sync","title":"Example 3: Rollback After a Failed Sync","text":"<pre><code># If a sync operation causes issues, roll back\nsync_repo --rb\n\n# Confirm the rollback when prompted\n</code></pre>"},{"location":"guide/#advanced-usage","title":"\ud83d\udd0d Advanced Usage","text":""},{"location":"guide/#working-with-branches","title":"Working with Branches","text":"<p>The script allows you to specify and switch branches:</p> <ol> <li> <p>Edit a repository's branch:    <code>bash    sync_repo --edit-track    # Select the repository and choose option 3 to edit branch</code></p> </li> <li> <p>When cloning a new repository, you'll be prompted for branch name:    <code>Enter branch name for source repository [main]: develop</code></p> </li> </ol>"},{"location":"guide/#repository-tracking-management","title":"Repository Tracking Management","text":"<p>View all tracked repositories with detailed information:</p> <pre><code>sync_repo --show-ids\n</code></pre> <p>Sample output:</p> <pre><code>REPOSITORY TRACKING INFORMATION\nTotal repositories: 3\n===============================================================\nID       REPOSITORY NAME                          BRANCH          PATH\n===============================================================\n24681    username/frontend-app                    main            /home/user/.sync_repo/SYNC_DIR/2025_03_REPOS/19/source_DIR_A8B9C0\n---------------------------------------------------------------\n13579    username/backend-api                     develop         /home/user/.sync_repo/SYNC_DIR/2025_03_REPOS/19/dest_DIR_X7Y8Z9\n---------------------------------------------------------------\n97531    organization/shared-lib                  staging         /home/user/.sync_repo/SYNC_DIR/2025_03_REPOS/20/source_DIR_D4E5F6\n---------------------------------------------------------------\n</code></pre>"},{"location":"guide/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"guide/#environment-variables","title":"Environment Variables","text":"<p>The script supports a <code>.env</code> file for development purposes:</p> <pre><code># Sample .env file\nENVIRONMENT=development\nBASE_DIR=/custom/path/to/sync_repo\n</code></pre>"},{"location":"guide/#required-dependencies","title":"Required Dependencies","text":"<p>Ensure the following commands are installed: - <code>tar</code>: For creating backups - <code>rsync</code>: For file synchronization - <code>git</code>: For repository operations - <code>jq</code>: For JSON parsing</p>"},{"location":"guide/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"Issue Possible Cause Solution Permission denied Lack of write access Ensure you have write permissions to <code>~/.sync_repo</code> Git operation failed Repository access issues Check repository permissions and credentials Command not found Missing dependencies Install required dependencies (tar, rsync, git, jq) Tracking file errors Corrupted JSON Run <code>sync_repo --edit-track</code> to fix or recreate tracking file Branch switching failed Non-existent branch Ensure the branch exists or create a new one when prompted"},{"location":"guide/#log-analysis","title":"Log Analysis","text":"<p>View detailed logs to diagnose issues:</p> <pre><code>sync_repo --show-logs\n# Select date and specific log file when prompted\n</code></pre>"},{"location":"guide/#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":"<ol> <li>Multi-User Support:</li> <li>System-wide configuration in <code>/var/lib/sync_repo</code></li> <li> <p>User permission management</p> </li> <li> <p>Enhanced Logging:</p> </li> <li>Log rotation for efficient storage</li> <li> <p>Export logs in multiple formats (CSV, HTML)</p> </li> <li> <p>Web Dashboard:</p> </li> <li>Real-time sync monitoring</li> <li>Visual repository management</li> <li> <p>Operation history and analytics</p> </li> <li> <p>Advanced Rollback Features:</p> </li> <li>Selective file/directory rollback</li> <li> <p>Comparison view before rollback</p> </li> <li> <p>Scheduled Operations:</p> </li> <li>Automated sync on predefined schedules</li> <li>Integration with cron jobs</li> </ol>"},{"location":"guide/#support-contribution","title":"\ud83e\udd1d Support &amp; Contribution","text":""},{"location":"guide/#getting-help","title":"Getting Help","text":"<p>For assistance or to report issues: - File an issue on the GitHub repository - Contact the development team at <code>support@example.com</code></p>"},{"location":"guide/#contributing","title":"Contributing","text":"<p>We welcome contributions to improve the script: 1. Fork the repository 2. Create a feature branch 3. Submit a pull request with your changes</p>"},{"location":"guide/#license","title":"\ud83d\udcdc License","text":"<p>This script is licensed under the MIT License.</p> <p>Copyright (c) 2025 Development Team</p>"},{"location":"installation/","title":"Installation Guide for Sync-Repos Tool","text":"<p>This beginner-friendly guide will help you install the <code>sync-repos</code> tool on Ubuntu systems.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing, make sure you have: - An Ubuntu-based system - Sudo privileges on your system - A Bitbucket account with access to the repository - Your Bitbucket username and app password ready</p> <p>Note: If you don't have an app password, you can create one in your Bitbucket account settings under \"App passwords\".</p>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":""},{"location":"installation/#1-install-the-sync-repos-tool","title":"1. Install the <code>sync-repos</code> Tool","text":"<ol> <li>Open a terminal</li> <li> <p>Press <code>Ctrl+Alt+T</code> to open a terminal window</p> </li> <li> <p>Copy and paste the following command:</p> </li> </ol> <p><code>bash    curl -L -u \"&lt;your-username&gt;:&lt;your-app-password&gt;\" -O \"https://api.bitbucket.org/2.0/repositories/supratimneogi007/syncmaster/downloads/sync-repos_2.8.4_all.deb\" &amp;&amp; sudo apt install ./sync-repos_2.8.4_all.deb</code></p> <ol> <li>Replace the placeholders:</li> <li>Replace <code>&lt;your-username&gt;</code> with your Bitbucket username</li> <li> <p>Replace <code>&lt;your-app-password&gt;</code> with your Bitbucket app password</p> </li> <li> <p>Press Enter to run the command</p> </li> <li>You'll be prompted to enter your system password for the <code>sudo</code> command</li> <li>The tool will download and install automatically</li> </ol>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that the installation was successful:</p> <ol> <li> <p>Run the following command:    <code>bash    sync-repos --help</code></p> </li> <li> <p>You should see the help menu for the sync-repos tool</p> </li> </ol>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ul> <li>Authentication errors: Make sure your Bitbucket username and app password are correct</li> <li>Download failures: Check your internet connection and try again</li> <li>Permission errors: Ensure you have sudo privileges on your system</li> </ul> <p>For additional help, contact your system administrator or check the troubleshooting guide.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you've installed the tool, check out the usage guide to learn how to use sync-repos effectively.</p>"},{"location":"maintenance/","title":"Development &amp; Maintenance Guide","text":"<p>This section is for developers maintaining the <code>sync-repos</code> tool.</p>"},{"location":"maintenance/#repository-structure","title":"Repository Structure","text":"<ul> <li>Location: <code>git@bitbucket.org:supratimneogi007/syncmaster.git</code></li> <li>Structure:</li> </ul> <pre><code>syncmaster/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 sync_repos.sh      # Source script\n\u251c\u2500\u2500 syncRepoV3_LTS.sh      # LTS version of the script\n\u251c\u2500\u2500 sync-repos-deb/        # Debian package files\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 index.sh       # Copy of LTS script used in deb package\n\u2502   \u2514\u2500\u2500 build.sh           # Build script for deb package\n\u251c\u2500\u2500 dist/\n\u2502   \u2514\u2500\u2500 sync-repos_x.x.x_all.deb  # Built .deb package\n\u251c\u2500\u2500 deb_update.sh          # Script to update deb package\n\u2514\u2500\u2500 README.md              # Documentation\n</code></pre>"},{"location":"maintenance/#development-process","title":"Development Process","text":""},{"location":"maintenance/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone git@bitbucket.org:supratimneogi007/syncmaster.git\ncd syncmaster\n</code></pre>"},{"location":"maintenance/#2-create-a-feature-branch","title":"2. Create a Feature Branch","text":"<p>Create a new branch with a specific naming convention:</p> <pre><code>git checkout -b feature/purpose/branchName\n</code></pre> <p>Examples: - <code>feature/ui/improved-logging</code> - <code>bugfix/backup/fix-permissions</code> - <code>enhancement/performance/reduce-memory-usage</code></p>"},{"location":"maintenance/#3-develop-your-changes","title":"3. Develop Your Changes","text":"<p>Make your changes to the codebase. Be sure to test your changes locally.</p>"},{"location":"maintenance/#4-push-changes-to-remote-branch","title":"4. Push Changes to Remote Branch","text":"<pre><code>git add .\ngit commit -m \"Meaningful commit message describing the changes\"\ngit push origin feature/purpose/branchName\n</code></pre>"},{"location":"maintenance/#5-create-a-pull-request","title":"5. Create a Pull Request","text":"<ul> <li>Go to the BitBucket repository</li> <li>Create a new Pull Request</li> <li>Set the source branch to your feature branch</li> <li>Set the target branch to <code>development</code></li> <li>Add a descriptive title and details about your changes</li> <li>Request reviewers</li> </ul>"},{"location":"maintenance/#6-code-review-process","title":"6. Code Review Process","text":"<ul> <li>Reviewers will examine the code changes</li> <li>Address any feedback in the PR</li> <li>Once approved, the PR will be merged into the <code>development</code> branch</li> </ul>"},{"location":"maintenance/#7-testing-on-development-branch","title":"7. Testing on Development Branch","text":"<ul> <li>The changes in the <code>development</code> branch undergo testing</li> <li>Fix any issues that arise during testing</li> <li>Create additional PRs if needed for fixes</li> </ul>"},{"location":"maintenance/#8-merge-to-master","title":"8. Merge to Master","text":"<ul> <li>Once testing confirms the changes are stable, create a PR from <code>development</code> to <code>master</code></li> <li>After approval, merge into the <code>master</code> branch</li> </ul>"},{"location":"maintenance/#9-release-process","title":"9. Release Process","text":"<p>After merging changes to the <code>master</code> branch:</p> <ol> <li> <p>Run the update script to update the deb package source:    <code>bash    cd /path/to/syncmaster    bash deb_update.sh</code></p> </li> <li> <p>When prompted, enter the new version number (e.g., 2.7.4)</p> </li> <li>Follow semantic versioning (MAJOR.MINOR.PATCH)</li> <li> <p>Increment appropriately based on the changes:</p> <ul> <li>MAJOR: incompatible API changes</li> <li>MINOR: backward-compatible new functionality</li> <li>PATCH: backward-compatible bug fixes</li> </ul> </li> <li> <p>Change to the sync-repos-deb directory:    <code>bash    cd sync-repos-deb</code></p> </li> <li> <p>Build the Debian package:    <code>bash    bash build.sh</code></p> </li> <li> <p>The script will:</p> </li> <li>Build the .deb package</li> <li>Upload it to BitBucket</li> <li>Update the version in documentation</li> </ol>"},{"location":"maintenance/#10-verify-release","title":"10. Verify Release","text":"<ul> <li>Download the new .deb package</li> <li>Install it on a test system</li> <li>Verify the changes work as expected</li> </ul>"},{"location":"maintenance/#maintenance-tasks","title":"Maintenance Tasks","text":""},{"location":"maintenance/#tracking-version-history","title":"Tracking Version History","text":"<p>Keep a changelog documenting all significant changes in each version.</p>"},{"location":"maintenance/#managing-dependencies","title":"Managing Dependencies","text":"<p>Regularly check and update dependencies and required packages listed in the Debian control file.</p>"},{"location":"maintenance/#documentation-updates","title":"Documentation Updates","text":"<p>When making changes to functionality, ensure that documentation is updated accordingly: - README.md - Installation docs - Usage guides</p>"},{"location":"maintenance/#troubleshooting","title":"Troubleshooting","text":"<p>If issues occur during the build process: - Check the build logs - Verify file permissions - Ensure all required tools are installed - Check BitBucket API access tokens for validity</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions for <code>sync-repos</code>.</p> <ul> <li>Download Fails:</li> <li>Check App Password scopes (<code>Repositories: Read</code>).</li> <li>Verify file exists in Downloads.</li> <li>Permission Denied:</li> <li>Use <code>sudo</code> for <code>apt install</code>.</li> <li>Command Not Found:</li> <li>Confirm installation:     <code>bash     which sync-repos</code></li> </ul>"},{"location":"usage/","title":"Sync Repositories Tool - User Guide","text":"<p>This document provides a detailed guide on how to use the <code>sync-repos</code> tool for synchronizing files, managing backups, and handling Git repositories. The tool is designed to be user-friendly and supports various operations like rollback, editing tracking files, and displaying logs.</p>"},{"location":"usage/#usage","title":"Usage","text":"<p>Run the tool with one of the following options:</p> <pre><code>sync-repos [OPTION]\n</code></pre>"},{"location":"usage/#options","title":"Options","text":""},{"location":"usage/#1-i-perform-file-synchronization","title":"1. <code>--i</code> - Perform File Synchronization","text":"<p>Synchronizes files between the source and destination directories or Git repositories. This operation includes: - Pulling the latest changes from the source repository. - Backing up the destination directory before syncing. - Synchronizing files while excluding <code>.git</code> and <code>node_modules</code>.</p> <p>Detailed Steps: 1. Run the following command:    <code>bash    sync-repos --i</code></p> <ol> <li>Source Directory Selection:</li> <li>You will see a prompt: \"Source Directory - Choose an option: (1) GIT URL (2) OP_ID\"</li> <li>Enter <code>1</code> to provide a Git URL or <code>2</code> to provide an Operation ID (OP_ID).</li> </ol> <p>If you chose option 1 (GIT URL):    - You will see: \"Enter Git URL:\"    - Enter the complete Git URL (e.g., https://github.com/username/repo.git)    - You will be prompted: \"Enter branch name (default: main):\"    - Enter the branch name or press Enter to use the default</p> <p>If you chose option 2 (OP_ID):    - You will see: \"Enter OP_ID:\"    - Enter the numerical Operation ID shown from the <code>--show-ids</code> command</p> <ol> <li>Destination Directory Selection:</li> <li>You will see a prompt: \"Destination Directory - Choose an option: (1) GIT URL (2) OP_ID\"</li> <li>Enter <code>1</code> to provide a Git URL or <code>2</code> to provide an Operation ID (OP_ID).</li> </ol> <p>If you chose option 1 (GIT URL):    - You will see: \"Enter Git URL:\"    - Enter the complete Git URL for the destination repository    - You will be prompted: \"Enter branch name (default: main):\"    - Enter the branch name or press Enter to use the default</p> <p>If you chose option 2 (OP_ID):    - You will see: \"Enter OP_ID:\"    - Enter the numerical Operation ID for the destination repository</p> <ol> <li>Backup Creation:</li> <li>The system will display: \"Creating backup of destination directory...\"</li> <li>A progress indicator will show the backup creation process</li> <li> <p>You'll see a confirmation message once the backup is complete with the backup filename</p> </li> <li> <p>Pull Latest Changes:</p> </li> <li>The system will display: \"Pulling latest changes from source repository...\"</li> <li> <p>Git pull output will be shown as changes are retrieved</p> </li> <li> <p>File Synchronization:</p> </li> <li>The system will display: \"Synchronizing files...\"</li> <li>You'll see rsync output showing which files are being copied/updated</li> <li> <p>A confirmation message will appear once synchronization is complete</p> </li> <li> <p>Git Operations:</p> </li> <li>You will be prompted: \"Do you want to perform Git operations? (yes/no)\"</li> </ol> <p>If you choose \"yes\":    - The system will display the Git status showing new/modified/deleted files    - You will be prompted: \"Do you want to add all changes? (yes/no)\"</p> <p>If you choose \"yes\" to add changes:    - The system will execute <code>git add .</code> and show the output    - You will be prompted: \"Enter commit message:\"    - Enter your descriptive commit message    - The system will create the commit and show the commit hash    - You will be prompted: \"Do you want to push changes? (yes/no)\"</p> <p>If you choose \"yes\" to push changes:    - The system will push the changes to the remote repository    - You'll see the Git push output and confirmation</p> <p>If you choose \"no\" at any point:    - The operation will skip to the next step or finish if it's the last step</p> <ol> <li>Operation Complete:</li> <li>The system will display: \"Synchronization completed successfully.\"</li> <li>You'll be returned to the command prompt</li> </ol> <p>Example:</p> <pre><code>sync-repos --i\n\nSource Directory - Choose an option: (1) GIT URL (2) OP_ID\n1\nEnter Git URL: https://github.com/user/source-repo.git\nEnter branch name (default: main): develop\n\nDestination Directory - Choose an option: (1) GIT URL (2) OP_ID\n2\nEnter OP_ID: 3\n\nCreating backup of destination directory...\nBackup created: /home/user/backups/dest-repo-2023-11-28-143022.tar.gz\n\nPulling latest changes from source repository...\nAlready up to date.\n\nSynchronizing files...\nsending incremental file list\nindex.js\nsrc/utils.js\nREADME.md\n\nSynchronization complete.\n\nDo you want to perform Git operations? (yes/no)\nyes\n\nChanges in destination repository:\nM  index.js\nM  src/utils.js\nM  README.md\n\nDo you want to add all changes? (yes/no)\nyes\n\nAdded all changes.\n\nEnter commit message: Update utils and documentation\n[develop 8a2b3c4] Update utils and documentation\n 3 files changed, 45 insertions(+), 12 deletions(-)\n\nDo you want to push changes? (yes/no)\nyes\n\nPushing changes to remote repository...\nEnumerating objects: 9, done.\nCounting objects: 100% (9/9), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (5/5), 578 bytes | 578.00 KiB/s, done.\nTotal 5 (delta 3), reused 0 (delta 0)\nTo https://github.com/user/dest-repo.git\n   a1b2c3d..8a2b3c4  develop -&gt; develop\n\nSynchronization completed successfully.\n</code></pre>"},{"location":"usage/#2-show-ids-id-show-operation-ids","title":"2. <code>--show-ids</code>, <code>-id</code> - Show Operation IDs","text":"<p>Displays a list of all tracked repositories along with their operation IDs, repository URLs, branches, and paths.</p> <p>Detailed Steps: 1. Run the following command:    <code>bash    sync-repos --show-ids</code></p> <ol> <li>View Repository Information:</li> <li>The system will display a formatted table showing:<ul> <li>OP_ID (numeric identifier)</li> <li>Repository URL</li> <li>Branch name</li> <li>Local repository path</li> </ul> </li> <li> <p>No further input is required for this command</p> </li> <li> <p>Using the Information:</p> </li> <li>Note down any OP_IDs you need for other operations</li> <li>Press any key to return to the command prompt if prompted</li> </ol> <p>Example:</p> <pre><code>sync-repos --show-ids\n\n+-------+----------------------------------------+---------+--------------------------------+\n| OP_ID |               REPO URL                 | BRANCH  |              PATH              |\n+-------+----------------------------------------+---------+--------------------------------+\n|   1   | https://github.com/user/repo1.git      | main    | /home/user/repositories/repo1  |\n|   2   | https://github.com/user/repo2.git      | develop | /home/user/repositories/repo2  |\n|   3   | https://github.com/org/project.git     | feature | /home/user/work/project        |\n+-------+----------------------------------------+---------+--------------------------------+\n</code></pre>"},{"location":"usage/#3-rb-rollback-to-the-latest-backup","title":"3. <code>--rb</code> - Rollback to the Latest Backup","text":"<p>Restores the destination directory to its most recent backup.</p> <p>Detailed Steps: 1. Run the following command:    <code>bash    sync-repos --rb</code></p> <ol> <li>Backup Selection:</li> <li>The system will display: \"Searching for latest backup...\"</li> <li>It will automatically locate the most recent backup file</li> <li> <p>You'll see: \"Latest backup found: [backup filename]\"</p> </li> <li> <p>Confirmation:</p> </li> <li>You will be prompted: \"Do you want to restore from this backup? (yes/no)\"</li> <li> <p>Enter <code>yes</code> to proceed or <code>no</code> to cancel the operation</p> </li> <li> <p>Restoration Process:</p> </li> <li>If you chose \"yes\":<ul> <li>The system will display: \"Restoring from backup...\"</li> <li>You'll see the extraction progress as files are restored</li> <li>Upon completion, you'll see: \"Restoration completed successfully.\"</li> </ul> </li> <li> <p>If you chose \"no\":</p> <ul> <li>The operation will be cancelled with a message: \"Restoration cancelled.\"</li> </ul> </li> <li> <p>Cleanup:</p> </li> <li>The system will ask: \"Do you want to delete the used backup file? (yes/no)\"</li> <li>Enter <code>yes</code> to delete the backup file or <code>no</code> to keep it</li> <li>If you chose \"yes\", you'll see: \"Backup file deleted.\"</li> </ol> <p>Example:</p> <pre><code>sync-repos --rb\n\nSearching for latest backup...\nLatest backup found: /home/user/backups/dest-repo-2023-11-28-143022.tar.gz\n\nDo you want to restore from this backup? (yes/no)\nyes\n\nRestoring from backup...\nextracting: index.js\nextracting: src/utils.js\nextracting: README.md\nextracting: package.json\nRestoration completed successfully.\n\nDo you want to delete the used backup file? (yes/no)\nyes\n\nBackup file deleted.\n</code></pre>"},{"location":"usage/#4-edit-track-et-edit-the-repository-tracking-file","title":"4. <code>--edit-track</code>, <code>-et</code> - Edit the Repository Tracking File","text":"<p>Allows you to edit the tracking file that stores information about repositories.</p> <p>Detailed Steps: 1. Run the following command:    <code>bash    sync-repos --edit-track</code></p> <ol> <li>Repository List Display:</li> <li>The system will display a table of all tracked repositories</li> <li> <p>You'll see OP_IDs, URLs, branches, and paths for all repositories</p> </li> <li> <p>Repository Selection:</p> </li> <li>You will be prompted: \"Enter the OP_ID of the repository you want to edit:\"</li> <li> <p>Enter the numeric OP_ID of your target repository</p> </li> <li> <p>Field Selection:</p> </li> <li>You will see: \"Choose the field to update:\"</li> <li>```<ol> <li>Repository URL</li> <li>Path</li> <li>Branch</li> <li>Operation ID  ```</li> </ol> </li> <li> <p>Enter the number corresponding to the field you want to edit</p> </li> <li> <p>Value Update:</p> </li> <li>Based on your field selection:<ul> <li>For Repository URL: \"Enter new Repository URL:\"</li> <li>For Path: \"Enter new Path:\"</li> <li>For Branch: \"Enter new Branch:\"</li> <li>For Operation ID: \"Enter new Operation ID:\"</li> </ul> </li> <li> <p>Enter the new value for the selected field</p> </li> <li> <p>Confirmation:</p> </li> <li>The system will display: \"Repository tracking information updated successfully.\"</li> <li> <p>The updated repository information will be shown</p> </li> <li> <p>Additional Edits:</p> </li> <li>You will be asked: \"Do you want to edit another repository? (yes/no)\"</li> <li>Enter <code>yes</code> to edit another repository or <code>no</code> to finish</li> </ol> <p>Example:</p> <pre><code>sync-repos --edit-track\n\n+-------+----------------------------------------+---------+--------------------------------+\n| OP_ID |               REPO URL                 | BRANCH  |              PATH              |\n+-------+----------------------------------------+---------+--------------------------------+\n|   1   | https://github.com/user/repo1.git      | main    | /home/user/repositories/repo1  |\n|   2   | https://github.com/user/repo2.git      | develop | /home/user/repositories/repo2  |\n|   3   | https://github.com/org/project.git     | feature | /home/user/work/project        |\n+-------+----------------------------------------+---------+--------------------------------+\n\nEnter the OP_ID of the repository you want to edit:\n2\n\nRepository Information:\nOP_ID: 2\nRepository URL: https://github.com/user/repo2.git\nBranch: develop\nPath: /home/user/repositories/repo2\n\nChoose the field to update:\n1. Repository URL\n2. Path\n3. Branch\n4. Operation ID\n3\n\nEnter new Branch:\nmain\n\nRepository tracking information updated successfully.\n\nUpdated Repository Information:\nOP_ID: 2\nRepository URL: https://github.com/user/repo2.git\nBranch: main\nPath: /home/user/repositories/repo2\n\nDo you want to edit another repository? (yes/no)\nno\n</code></pre>"},{"location":"usage/#5-show-logs-display-logs","title":"5. <code>--show-logs</code> - Display Logs","text":"<p>Displays logs of previous operations in a structured format.</p> <p>Detailed Steps: 1. Run the following command:    <code>bash    sync-repos --show-logs</code></p> <ol> <li>Date Selection:</li> <li>The system will display: \"Available log dates:\"</li> <li>You'll see a list of dates with log entries, numbered sequentially:      <code>Available log dates:      1) 10_April      2) 11_April      3) 17_April      4) 18_April      Choose a date (1-4):</code></li> <li> <p>Enter the number corresponding to your chosen date</p> </li> <li> <p>Log Selection:</p> </li> <li>The system will display a list of log files for the selected date:      <code>Available logs for 10_April:      1) sync_20250410_123705.log.json      2) sync_20250410_123903.log.json      3) sync_20250410_124010.log.json      4) sync_20250410_124103.log.json      5) sync_20250410_124141.log.json      6) sync_20250410_124251.log.json</code></li> <li> <p>Enter the number corresponding to your chosen log file</p> </li> <li> <p>Log Details:</p> </li> <li> <p>The system will display the log contents in JSON format, showing detailed information about the operation:      <code>json      {        \"logs\": [          {            \"timestamp\": \"2025-04-10T12:39:03+05:30\",            \"type\": \"info\",            \"message\": \"Tracking file not found. Creating a new one...\"          },          {            \"timestamp\": \"2025-04-10T12:39:03+05:30\",            \"type\": \"success\",            \"message\": \"Tracking file created at /home/openweb/.sync_repo/SYNC_DIR/repo_tracking.json\"          },          {            \"timestamp\": \"2025-04-10T12:39:03+05:30\",            \"type\": \"info\",            \"message\": \"Detected Git URL for source. Checking tracking file...\"          },          {            \"timestamp\": \"2025-04-10T12:39:03+05:30\",            \"type\": \"info\",            \"message\": \"Cloning source repository...\"          },          {            \"timestamp\": \"2025-04-10T12:39:22+05:30\",            \"type\": \"success\",            \"message\": \"source repository cloned to /home/openweb/.sync_repo/SYNC_DIR/2025_04_REPOS/10/source_DIR_iPDACw (branch: main)\"          },          {            \"timestamp\": \"2025-04-10T12:39:22+05:30\",            \"type\": \"info\",            \"message\": \"Detected Git URL for dest. Checking tracking file...\"          }        ]      }</code></p> </li> <li> <p>Navigation Options:</p> </li> <li>After viewing the logs, you can press any key to return to the previous menu</li> <li>You can navigate back to select different log files or dates as needed</li> <li>Use Ctrl+C to exit the log viewer at any time</li> </ol> <p>Example:</p> <pre><code>sync-repos --show-logs\n\nAvailable log dates:\n1) 10_April\n2) 11_April\n3) 17_April\n4) 18_April\nChoose a date (1-4): 1\n\nAvailable logs for 10_April:\n1) sync_20250410_123705.log.json\n2) sync_20250410_123903.log.json\n3) sync_20250410_124010.log.json\n4) sync_20250410_124103.log.json\n5) sync_20250410_124141.log.json\n6) sync_20250410_124251.log.json\nChoose a log (1-6): 2\n\n{\n  \"logs\": [\n    {\n      \"timestamp\": \"2025-04-10T12:39:03+05:30\",\n      \"type\": \"info\",\n      \"message\": \"Tracking file not found. Creating a new one...\"\n    },\n    {\n      \"timestamp\": \"2025-04-10T12:39:03+05:30\",\n      \"type\": \"success\",\n      \"message\": \"Tracking file created at /home/openweb/.sync_repo/SYNC_DIR/repo_tracking.json\"\n    },\n    {\n      \"timestamp\": \"2025-04-10T12:39:03+05:30\",\n      \"type\": \"info\",\n      \"message\": \"Detected Git URL for source. Checking tracking file...\"\n    },\n    {\n      \"timestamp\": \"2025-04-10T12:39:03+05:30\",\n      \"type\": \"info\",\n      \"message\": \"Cloning source repository...\"\n    },\n    {\n      \"timestamp\": \"2025-04-10T12:39:22+05:30\",\n      \"type\": \"success\",\n      \"message\": \"source repository cloned to /home/openweb/.sync_repo/SYNC_DIR/2025_04_REPOS/10/source_DIR_iPDACw (branch: main)\"\n    },\n    {\n      \"timestamp\": \"2025-04-10T12:39:22+05:30\",\n      \"type\": \"info\",\n      \"message\": \"Detected Git URL for dest. Checking tracking file...\"\n    }\n    // More log entries...\n  ]\n}\n\nPress Enter to return to log selection...\n</code></pre>"},{"location":"usage/#6-clear-backups-clear-the-backup-folder","title":"6. <code>--clear-backups</code> - Clear the Backup Folder","text":"<p>Deletes all backups stored in the backup folder.</p> <p>Detailed Steps: 1. Run the following command:    <code>bash    sync-repos --clear-backups</code></p> <ol> <li>Backup Summary:</li> <li>The system will display: \"Found [number] backup files in the backup folder.\"</li> <li> <p>You'll see the total size of the backup files: \"Total size: [size] MB\"</p> </li> <li> <p>Confirmation:</p> </li> <li>You will be prompted: \"Are you sure you want to delete all backups? (yes/no)\"</li> <li> <p>Enter <code>yes</code> to proceed with deletion or <code>no</code> to cancel</p> </li> <li> <p>Deletion Process:</p> </li> <li>If you chose \"yes\":<ul> <li>The system will display: \"Deleting backups...\"</li> <li>A progress indicator or list of files being deleted may be shown</li> <li>Upon completion, you'll see: \"All backups have been deleted successfully.\"</li> </ul> </li> <li>If you chose \"no\":<ul> <li>The operation will be cancelled with a message: \"Operation cancelled. Backups were not deleted.\"</li> </ul> </li> </ol> <p>Example:</p> <pre><code>sync-repos --clear-backups\n\nFound 15 backup files in the backup folder.\nTotal size: 450.8 MB\n\nAre you sure you want to delete all backups? (yes/no)\nyes\n\nDeleting backups...\nDeleted: dest-repo-2023-11-28-143022.tar.gz\nDeleted: repo1-2023-11-27-101545.tar.gz\nDeleted: project-2023-11-25-092218.tar.gz\n...\nDeleted: repo2-2023-11-22-153012.tar.gz\n\nAll backups have been deleted successfully.\n</code></pre>"},{"location":"usage/#7-rlp-rollback-the-last-git-push","title":"7. <code>--rlp</code> - Rollback the Last Git Push","text":"<p>Reverts the last Git push in the destination repository.</p> <p>Detailed Steps: 1. Run the following command:    <code>bash    sync-repos --rlp</code></p> <ol> <li>Repository Selection:</li> <li>You will be prompted: \"Enter the OP_ID of the repository to rollback:\"</li> <li> <p>Enter the numeric OP_ID of the repository</p> </li> <li> <p>Current Status Check:</p> </li> <li>The system will display: \"Checking current repository status...\"</li> <li> <p>You'll see the current HEAD commit hash and message</p> </li> <li> <p>Previous Commit Identification:</p> </li> <li>The system will display: \"Previous commit: [commit hash]\"</li> <li> <p>You'll see the commit message and details</p> </li> <li> <p>Confirmation:</p> </li> <li>You will be prompted: \"Are you sure you want to rollback to this commit? (yes/no)\"</li> <li> <p>Enter <code>yes</code> to proceed with the rollback or <code>no</code> to cancel</p> </li> <li> <p>Rollback Process:</p> </li> <li> <p>If you chose \"yes\":</p> <ul> <li>The system will display: \"Rolling back to previous commit...\"</li> <li>You'll see Git output as the repository is reset</li> <li>You will be prompted: \"Do you want to force push this rollback? (yes/no)\"</li> </ul> <p>If you choose \"yes\" to force push:  - The system will display: \"Force pushing rollback...\"  - You'll see Git output as changes are pushed  - Upon completion, you'll see: \"Rollback has been successfully pushed.\"</p> <p>If you choose \"no\" to force push:  - The operation will finish locally with a message: \"Rollback completed locally but not pushed.\"</p> </li> <li> <p>If you chose \"no\" at the initial confirmation:</p> <ul> <li>The operation will be cancelled with a message: \"Rollback cancelled.\"</li> </ul> </li> </ol> <p>Example:</p> <pre><code>sync-repos --rlp\n\nEnter the OP_ID of the repository to rollback:\n2\n\nChecking current repository status...\nCurrent HEAD: 8a2b3c4 - Update utils and documentation\n\nPrevious commit: a1b2c3d - Fix pagination in API responses\n\nAre you sure you want to rollback to this commit? (yes/no)\nyes\n\nRolling back to previous commit...\nHEAD is now at a1b2c3d Fix pagination in API responses\n\nDo you want to force push this rollback? (yes/no)\nyes\n\nForce pushing rollback...\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/user/repo2.git\n + 8a2b3c4...a1b2c3d develop -&gt; develop (forced update)\n\nRollback has been successfully pushed.\n</code></pre>"},{"location":"usage/#8-rtc-rollback-to-a-specific-git-commit","title":"8. <code>--rtc</code> - Rollback to a Specific Git Commit","text":"<p>Rolls back the destination repository to a specific Git commit.</p> <p>Detailed Steps: 1. Run the following command:    <code>bash    sync-repos --rtc</code></p> <ol> <li>Repository Selection:</li> <li>You will be prompted: \"Enter the OP_ID of the repository to rollback:\"</li> <li> <p>Enter the numeric OP_ID of the repository</p> </li> <li> <p>Commit History Display:</p> </li> <li>The system will display: \"Recent commits in this repository:\"</li> <li> <p>You'll see a list of recent commits with hashes, dates, authors, and messages:      <code>8a2b3c4 (2023-11-28) - John Doe: Update utils and documentation      a1b2c3d (2023-11-27) - Jane Smith: Fix pagination in API responses      e5f6g7h (2023-11-25) - John Doe: Implement search functionality</code></p> </li> <li> <p>Commit Selection:</p> </li> <li>You will be prompted: \"Enter the commit hash you want to rollback to:\"</li> <li> <p>Enter the full or abbreviated commit hash (e.g., \"a1b2c3d\")</p> </li> <li> <p>Target Commit Verification:</p> </li> <li>The system will display: \"Selected commit:\"</li> <li> <p>You'll see details of the selected commit including hash, author, date, and message</p> </li> <li> <p>Confirmation:</p> </li> <li>You will be prompted: \"Are you sure you want to rollback to this commit? (yes/no)\"</li> <li> <p>Enter <code>yes</code> to proceed with the rollback or <code>no</code> to cancel</p> </li> <li> <p>Rollback Process:</p> </li> <li> <p>If you chose \"yes\":</p> <ul> <li>The system will display: \"Rolling back to selected commit...\"</li> <li>You'll see Git output as the repository is reset</li> <li>You will be prompted: \"Do you want to force push this rollback? (yes/no)\"</li> </ul> <p>If you choose \"yes\" to force push:  - The system will display: \"Force pushing rollback...\"  - You'll see Git output as changes are pushed  - Upon completion, you'll see: \"Rollback has been successfully pushed.\"</p> <p>If you choose \"no\" to force push:  - The operation will finish locally with a message: \"Rollback completed locally but not pushed.\"</p> </li> <li> <p>If you chose \"no\" at the initial confirmation:</p> <ul> <li>The operation will be cancelled with a message: \"Rollback cancelled.\"</li> </ul> </li> </ol> <p>Example:</p> <pre><code>sync-repos --rtc\n\nEnter the OP_ID of the repository to rollback:\n2\n\nRecent commits in this repository:\n8a2b3c4 (2023-11-28) - John Doe: Update utils and documentation\na1b2c3d (2023-11-27) - Jane Smith: Fix pagination in API responses\ne5f6g7h (2023-11-25) - John Doe: Implement search functionality\ni9j0k1l (2023-11-22) - Jane Smith: Add user authentication module\nm2n3o4p (2023-11-20) - John Doe: Initial project setup\n\nEnter the commit hash you want to rollback to:\ne5f6g7h\n\nSelected commit:\nCommit: e5f6g7h\nAuthor: John Doe &lt;john.doe@example.com&gt;\nDate: Sat Nov 25 14:23:45 2023 +0100\nMessage: Implement search functionality\n\nAre you sure you want to rollback to this commit? (yes/no)\nyes\n\nRolling back to selected commit...\nHEAD is now at e5f6g7h Implement search functionality\n\nDo you want to force push this rollback? (yes/no)\nyes\n\nForce pushing rollback...\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/user/repo2.git\n + 8a2b3c4...e5f6g7h develop -&gt; develop (forced update)\n\nRollback has been successfully pushed.\n</code></pre>"},{"location":"usage/#additional-notes","title":"Additional Notes","text":"<ul> <li>Backup Creation: Before performing any synchronization, the tool automatically creates a backup of the destination directory.</li> <li>Git Operations: After synchronization, you can optionally perform Git operations like adding changes, committing, and pushing to the remote repository.</li> <li>Tracking File: The tool maintains a JSON-based tracking file to store repository information. This file is essential for operations like editing tracking details or showing operation IDs.</li> </ul>"},{"location":"usage/#getting-started","title":"Getting Started","text":"<ol> <li>Ensure you have the required dependencies installed: <code>git</code>, <code>rsync</code>, <code>tar</code>, and <code>jq</code>.</li> <li>Clone the tool or copy it to your desired location.</li> <li>Run the tool with the appropriate option as described above.</li> </ol> <p>For any issues or questions, refer to the logs using the <code>--show-logs</code> option or contact your system administrator.</p>"}]}